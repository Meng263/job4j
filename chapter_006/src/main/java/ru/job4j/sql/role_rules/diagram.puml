@startuml
' uncomment the line below if you're using computer with a retina display
' skinparam dpi 300
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define unique(x) <color:green>x</color>
!define not_null(x) <u>x</u>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes

' entities

Table(user, "User\n(User in our system)") {
primary_key(id) INTEGER
not_null(unique(username)) VARCHAR[32]
not_null(password) VARCHAR[64]
not_null(role_id) INTEGER
}

Table(role, "Role\n(role of user)") {
primary_key(id) INTEGER
not_null(user_id) INTEGER
not_null(unique(role_id)) VARCHAR[64]
}

Table(role_rules, "role_rules\n(extra table)") {
primary_key(id) INTEGER
not_null(role_id) INTEGER
not_null(rule_id) INTEGER
}

Table(rules, "Rules\n(Rules of roles)") {
primary_key(id) INTEGER
not_null(rule_title) VARCHAR[64]
}

Table(item, "Item\n(Items)") {
primary_key(item_id) INTEGER
not_null(title) VARCHAR[64]
not_null(desc) VARCHAR[64]
not_null(user_id) INTEGER
not_null(comment_id) INTEGER
not_null(attached_id) INTEGER
}

Table(comment, "Comment\n(Comments of items)") {
primary_key(id) INTEGER
not_null(uncomment) BLOB
}

Table(attached, "Attached_files\n(Attached_files for items)") {
primary_key(user_id) INTEGER
not_null(path) VARCHAR[256]
}

Table(state, "State\n(State of items)") {
primary_key(user_id) INTEGER
not_null(desc) VARCHAR[64]
}

Table(category, "Category\n(Category of items)") {
primary_key(user_id) INTEGER
not_null(desc) VARCHAR[256]
}

' relationships
role --> user
user --> item
category --> item
state --> item
item --> attached
item --> comment
' many to many relationship
role -->  role_rules : ""
rules -->  role_rules : ""

' Add mark if you like
'user "1" --> "*" user_group : "A user may be \nin many groups"
'group "1" --> "0..N" user_group : "A group may \ncontain many users"
@enduml